코딩테스트 팁

자바

Char -> int 로 바꿀 때
Character.getNumericValue() 

Char -> String 으로 바꿀 때
Character.toString()

 String -> int 로 바꿀 때    -> int 로 표현할수 있는 범위 외의 숫자를 바꾸면 런타임 에러발생
Integer.parseInt(s)

Integer -> String 으로 바꿀 때
String.valueOf(I);

int -> String 으로 바꿀떄
Integer.toString(i)

가변배열을 배열로 바꿀 때(ArrayList -> array) 로 바꿀떄
public int[] ArrayList_to_array(ArrayList<Integer> list){
        int[] answer= {};

        answer = new int[list.size()];
          int cursur = 0;
          while(cursur < list.size()) {
             answer[cursur] = list.get(cursur);
             System.out.println(list.get(cursur));
             cursur++;
          }
          return answer;        
     }

Bfs – 너비 우선 탐색 -> 큐를 사용
Dfs – 재귀 호출로 이용

Arrays.sort -> 오름차순으로 정렬되니 유의할 것(1,2,3,4,5,6)
크루스칼 알고리즘 – 그리디 알고리즘의 종류(한붓그리기와 유사)

우선순위 큐
PriorityQueue<Integer> que_min = new PriorityQueue<Integer>();   - 오름차순(1,2,3,4)
PriorityQueue<Integer> que_min =
new PriorityQueue<Integer>( Collections.reverseOrder());  - 내림차순(4,3,2,1)

Comparable – 객체를 정렬시 사용
사용법 comparable 인터페이스 상속
public class Disk implements Comparable<Disk>

이후 compareTo 오버라이딩 필요
@Override
public int compareTo(Disk d)
return 1 -> 두 객체간의 자리가 바뀜
return 0 or -1 -> 자리가 바뀌지않음
this.x > p.x return 1 -> 오름차순
this.x > p.x return -1 -> 내림차순

정렬할 때
Collections.sort – 컬렉션들 정렬
Arrays.sort – 배열들 정렬 -> 오름차순 정렬

우선순위 큐에서 String 이나 Integer 와 같은 것들을 정렬할 때
PriorityQueue<String> que = new PriorityQueue<>(new Comparator<String>() {
			
@Override
public int compare(String a, String b) {
return Integer.parseInt(a+b) - Integer.parseInt(b+a); 
}
});

혹은 위와 같은 조건으로 array.sorts 를 사용할 때

Arrays.sort(strings, new Comparator<String>() {

@Override
public int compare(String a, String b) {
return Integer.parseInt(b + a) - Integer.parseInt(a + b);
}
});

테스트 케이스를 생각할때는 극단적인 상황도 생각할 것. 0000 이런거

이중배열 int[][] 같은거는 array.clone 으로 깊은 복사가 되지않음(같은 주소값을 참조한다는 이야기) 그러므로 이중 for문으로 복사해야함 for문이랑 clone 문 써도 가능
int[][] copy = new int[triangle.length][];
	    for(int x=0; x<triangle.length; x++) {
		copy[x] = triangle[x].clone();
	    }


순차적인 것을 할 때 + 보다는 – 를 많이 쓰는 방향으로 설계를 하자. – 배열에서 오류가 나기 쉽다.
